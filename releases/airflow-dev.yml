apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: airflow
  namespace: dev
spec:
  interval: 30s
  releaseName: airflow-dev
  chart:
    spec:
      chart: airflow
      version: "1.7.0"
      sourceRef:
        kind: HelmRepository
        name: apache-airflow
        namespace: flux-system
  values:
    defaultAirflowTag: "2.5.1"
    airflowVersion: "2.5.1"
    fernetKey: "zTxhk7FuGqQVPZVoukLn5bGWOrgHzhQnBnaqAItcZGI="
    env:
      - name: "AIRFLOW__CORE__LOAD_EXAMPLES"
        value: "False"
      - name: "AIRFLOW__KUBERNETES_EXECUTOR__NAMESPACE"
        value: "dev"
      - name: "AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_REPOSITORY"
        value: "apache/airflow"
      - name: "AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_TAG"
        value: "slim-2.5.1-python3.8"
    executor: "KubernetesExecutor"
    createUserJob:
      useHelmHooks: false
    migrateDatabaseJob:
      useHelmHooks: false
    dags:
      persistence: 
        enabled: False
      gitSync: 
        enabled: True
        repo: git@github.com:hichemBA67/airflow-private-dags.git
        branch: master
        maxFailures: 0
        subPath: ""
        wait: 60
        sshKeySecret: airflow-ssh-secret
    extraSecrets:
      airflow-ssh-secret:
        data: |
          gitSshKey: 'LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUNGd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFnRUFrTzRsT1ZpaHFlYksyamphSXdZNWZKNHZGOW9QelpwWHQ3NWc4UGJnbkhCNlQzaW5RSmZECmJWMThGWC9EM1A0Zi9weG5oVFpsbStwU2V1OUR3YU4xdUhpVmpXWWNhSUtqd25TU2twRE5TQTUyNjN4czhBSk12czhrTmwKM2VkZ2VRd096ZmhHQ0tQclhSR1FIV0ZXTjhocnpHNUJ2UHVOVm5ZQVVsVDRxTTBNSnlkNHl2Um0zc0dTQURMMisvaXI0VwozUHNKUG5XM2IzenE2WEllV3NBMmpuN1AzeTZnYUttcFNuOWFSbzExcjdPb1ZYRWpRL1dHYWVRU0djZldzK2RveXkxdEZZClg1ZlBSWnZIa082TldGbW1mWDVoYjFGYm9iazl0VHcwQ25jTXd6akNvRXNLNDJMVTVPWEFtWldCcGdsSDRoZXJBaEphUm4KQS9BMjJhTGtMeFB6eE1oaUZBNEF6ekhuWGpjQnlYTVpnVkFSRVA2c2pjRnFpb1pGZmRQTXBOTnowTVgxLy92bHFpQW1yZAovbzBZOFZnQkVlZmRWa1BSRW5DWVRxaUQ2NUlDSFRnTVlERUxEc2hRbmo0c1dON2lYOW1TVm5BcXJXUTdsNFhEVXNGb0txCnFVMk1xZCs5MnYvZE44K0N3RnhXb1R6QWJyZjNLWnpDSW9WTzcwZjZMcFYyZnJKLzhPTStwbG5XM21pdTlBWHVNTW9JbVIKQk1DYVdyU1pDQjQwZmEzZVpwSEJ2WWRHcjJNeWVQRkhPUUJ5NmpXajNMa0NVdEFmTVR1UjBweXJtMXc0WEVJVk9QMFVjago0bjlOcmQ5T1pHaUxueCtCQ09vRUpzZW1QQlR4UCtUL255U2dFNTBBK0taQ0NxRlNlU2ZGN0dOWE9ieVg2NXBOT1YyTHlHCk1BQUFkZ3JhZzY0SzJvT3VBQUFBQUhjM05vTFhKellRQUFBZ0VBa080bE9WaWhxZWJLMmpqYUl3WTVmSjR2RjlvUHpacFgKdDc1ZzhQYmduSEI2VDNpblFKZkRiVjE4RlgvRDNQNGYvcHhuaFRabG0rcFNldTlEd2FOMXVIaVZqV1ljYUlLanduU1NrcApETlNBNTI2M3hzOEFKTXZzOGtObDNlZGdlUXdPemZoR0NLUHJYUkdRSFdGV044aHJ6RzVCdlB1TlZuWUFVbFQ0cU0wTUp5CmQ0eXZSbTNzR1NBREwyKy9pcjRXM1BzSlBuVzNiM3pxNlhJZVdzQTJqbjdQM3k2Z2FLbXBTbjlhUm8xMXI3T29WWEVqUS8KV0dhZVFTR2NmV3MrZG95eTF0RllYNWZQUlp2SGtPNk5XRm1tZlg1aGIxRmJvYms5dFR3MENuY013empDb0VzSzQyTFU1TwpYQW1aV0JwZ2xINGhlckFoSmFSbkEvQTIyYUxrTHhQenhNaGlGQTRBenpIblhqY0J5WE1aZ1ZBUkVQNnNqY0ZxaW9aRmZkClBNcE5OejBNWDEvL3ZscWlBbXJkL28wWThWZ0JFZWZkVmtQUkVuQ1lUcWlENjVJQ0hUZ01ZREVMRHNoUW5qNHNXTjdpWDkKbVNWbkFxcldRN2w0WERVc0ZvS3FxVTJNcWQrOTJ2L2ROOCtDd0Z4V29UekFicmYzS1p6Q0lvVk83MGY2THBWMmZySi84TwpNK3BsblczbWl1OUFYdU1Nb0ltUkJNQ2FXclNaQ0I0MGZhM2VacEhCdllkR3IyTXllUEZIT1FCeTZqV2ozTGtDVXRBZk1UCnVSMHB5cm0xdzRYRUlWT1AwVWNqNG45TnJkOU9aR2lMbngrQkNPb0VKc2VtUEJUeFArVC9ueVNnRTUwQStLWkNDcUZTZVMKZkY3R05YT2J5WDY1cE5PVjJMeUdNQUFBQURBUUFCQUFBQ0FCNjJFRFpFTlZHN0FjNVhVTVl1T2YxUnlkbnNqLys2RG85MQpyTFl6SW1xVUhSNzlDcmdSME13NmpLSkRwajRNcmJ2MjZhcmRXWSsrQ2tkWnIwcDN1R2prU0pDampDNkxUR2RXNjM1YVo5CjIyanZXY3NycnpTYzcvTndXOFEzbFFaaGl6dVRPa2YzY0ZjUzh5NStvMVlEeHZBVmh5R2tUcEY5Uk5rdGYxbkp4YU1BWnMKVGZJSE5nb204ZlhaNE1WbVBaTUxNU3pHcGgzZVl5c2Z6eFhjK0ZLZXhhN2VBd2phdHZCOTV5UGZNd3FOOEFSWENxbUtmRApheEtUTEVXWmRhMkthQlZFWEUwNWJxY3ArUktac21MLzhGdFViaEk0TThvajVsTWkxRVpKYnU5cGRqaWdYa2pMOXlBZ0hYCjJPSkdDS1ErekJwaSswc3VPTlFwVVg0eDJkZGNRYWc0M09ZZDVhU1BzazJUcGdYV0gzTHIrdG9WZnpmNW5JWnJvZGRLYTAKZFpiOXYvZ21tSytiSEVKZW1JR0hQeGZHNllOYVFBeGh6Sm9lWC9Odzhaa05mdkdkR0hKTWJSczExNkxQS0I3clk2ZDJxTQpGOVpheEI3eWxnRkg4UjdCR2k0b1I1c1RKTlk4NHIwU0x2QzRRN0lNM2I4ai9mcm1LdVc1bnpsMUpUVnh4VVhkMzh0MkRuCkRXemMvRUtFVjh5QlRWMmlqa2R4SG1DWnZKcHY3c1lQUkdMczF6TXJYUjNMS0U2WHlJZWlUNTZhZlA2QW9aZy8xdk1rK1IKbS9nQTlEdXJrKzFNNzhWWVVVSmZkRTJXTTZMRklncDRER3VsbWdTTU4zZjI1dGNVcWNSQ3JqZ3N2SjhJN3Q1K0VlMDNjcgpWK1RGMVJuMVlackVjZk9tNzVBQUFCQVFDaG8vZEN5RWVNNE84eHp6MzAvckEwL3RMNGhQWGNVajA2RmttWUQ1TVZ3Zk96CnBwYmlHSUNiaTEyc0hoTzF4RE95Y2Y1NEhEb3orb1NEeTRJaVExSGVCUmk3MEVwUFZrRTlsY3NPaE45RUszN21nUHRWKzIKZFlMS1E3b01ITXl5QXNBM05LUEwwS3d0RWY5ZDlhSldlMmFuNTlCeEd4SUVzVFRpcG9vaUxva2hxQXBZaVk4TUFzNDJmOQpzbEFCSnBXNXl5TnRxN0txNDVXYm9tQW5rZSt5WVl3NTBYdUJCQjlZbVo1Y3UyUFU0NDlMTTdpdENDTWlxT0pVeXl0TEtXCjRLb0dxbkE3OEpOZ2RvR25OZ01zRjRYWE4rZnBNNndFVGNtcFV5T3FWczJibmRLWUpFRnhZcFkwM3krQ1ZZZlVUaGZ5TGMKcktIbnFVN0NoWnlBN1RLNEFBQUJBUUMxSlVIYzdBa1NUdCs3NGN2SmZPaFE0dCsxQlUxSWNiVkc3R3FwT012VzlZRjE2NwpRRFlua3dwYW0rTm5HV3N6K0pvUWdIaUtQZWplSmI5K2hSMEtDc21sN0hsdmJMTVRhcmxHUWlZcmZyK0tLU0FrcUtmeldzClJhSVU1Z25SaWRUcStRZW1tSVNwU3BGNlpNVlBxM3BkbFhEK1dZY3dBQ1VrUEtyVHJoalhqUTNWcWdlRVN4NDg1OTRlZkgKVkw4Q3oxN0pROUFzQytmd2o3TjBjUEt0elE3SVY2TTcwd0ZyZlpUNHFjbi84eWtwbXk3MnZpUjFtNGo3ZE1TdG1kVzlNRgpFV0x6Z2xoT2ZqZnl3VTRUNmQ5dFpOd3M4NWxuQ256NkZFSUx6WVM5NXM4UkZ1UzUrK0s5dll0MHJJaGhDR3B5UTFpeUhvCjhkdDY1Qnp3MkVPbnhyQUFBQkFRRE0wYzFmcW5OZ3Q0cEF3bm9hOFZ6bFVqZDVYeHBNWXVsKy9aTlNLZ2k5NHpVVjVOaFIKVDZsUU9qVjAzZDlBRHFEUXlyRVVENGVBZ2lOZndod0xsbFBFRTYrT1BpKzZkaW1Ta2wzeWZoWG03empGc2ZDcWd3aDZmdwpPUm4xa0pHMlphMFR0REdoZ1hxSUlFV2VBaTE0cmc3aVNPT1dqWmJsbllLMHFLTUtON01FYXlGdERnZWlDL1d3UEFEajJiCjVyUGZOZXl6MDM5bXpvMjEzUk9pZXBCMmI0SXVtZVcxakpLMFVNYjc4Nk1mRTk4cDVuYWNMMk9mZjlndTRKQ2FscGNhd0kKT2l6d3ZIelhQN0pSbHhnYlNTcnZwQ2RHZ0NGd0ozYWVCdk1zVjQwTEFWWEh3amlIOHBWWmFNakM3Qms1Z1AyTE52YWtkdApwNXRVbUtvY2hHSHBBQUFBSldWak1pMTFjMlZ5UUdsd0xURTNNaTB6TVMwM05pMDROQzVsWXpJdWFXNTBaWEp1WVd3QkFnCk1FQlE9PQotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K'
    